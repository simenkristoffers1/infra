name: Migrate Database

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to migrate"
        required: true
        type: choice
        options:
          - staging
          - production

defaults:
  run:
    working-directory: ./assistant

jobs:
  migrate-database:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout to the branch
        uses: actions/checkout@v2

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.DBMIGRATE_AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.DBMIGRATE_AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.DBMIGRATE_AZURE_SUBSCRIPTION_ID }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Run Migration Script
        run: dotnet run --project ./src/DbUpMigrator
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: 5432
          DB_USERNAME: ${{ secrets.DB_USER }}
          DB_DATABASE: ${{ secrets.DB_NAME }}
          ASPNETCORE_ENVIRONMENT: ${{ vars.ASPNETCORE_ENVIRONMENT }}

      - name: Retrieve Access Token
        id: get-access-token
        run: |
          ACCESS_TOKEN=$(az account get-access-token --resource https://ossrdbms-aad.database.windows.net --query accessToken --output tsv)
          echo "Found access token: $ACCESS_TOKEN"
          echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV

      - name: Debug Identity List
        run: |
          echo "Full list of identities:"
          az identity list -o table

      - name: Assign Role to Managed Identities
        env:
          PGPASSWORD: ${{ env.ACCESS_TOKEN }}
        run: |
          declare -A ROLE_MAP=(
            ["id-aiasst-api"]="api_user"
            ["id-aiasst-search"]="search_user"
            ["id-aiasst-indexation"]="indexation_user"
          )

          for PREFIX in "${!ROLE_MAP[@]}"; do
            ROLE="${ROLE_MAP[$PREFIX]}"
            echo "Processing identity: $PREFIX (role: $ROLE)"

            IDENTITY_NAME=$(az identity list --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --query "[?starts_with(name, '$PREFIX')].name" -o tsv | head -n 1)
            
            if [ -z "$IDENTITY_NAME" ]; then
              echo "ERROR: No managed identity found with prefix '$PREFIX'"
              exit 1
            fi

            echo "Found identity: $IDENTITY_NAME"
            psql "host=${{ secrets.DB_HOST }} port=5432 dbname=postgres user=${{ secrets.DB_USER }} sslmode=require" \
            -c "SELECT * FROM pgaadauth_create_principal('$IDENTITY_NAME', false, false);" \
            -c "GRANT $ROLE TO \"$IDENTITY_NAME\";"
          done
